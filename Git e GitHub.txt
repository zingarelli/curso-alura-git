====
Curso de
Git e GitHub: Controle e compartilhe seu código
Instrutor: Vinicius Dias

Com algumas anotações do curso de GIT do Bootcamp TQI | DIO
-----------

- as letras que formam GIT não têm um significado, mas é alvo de sarcasmo do próprio criador, Linus Torvalds

- Uma das vantagens do Git sobre outros sistemas de controle de versão é que com o Git você tem uma versão no seu repositório local, na sua máquina, podendo trabalhar em cima dessa versão e depois fazer o push para o repositório remoto. Possível trabalhar "offline" e de modo distribuído (cada pessoa tem o arquivo em seu repositório local, depois devem ser resolvidos os problemas de merge entre alterações diferentes em um mesmo arquivo).

- VCS: Version Control System

- O Git é a ferramenta para o versionamento; o GitHub é um repositório remoto de código, muito utilizado pelos programadores e que também pode servir de "vitrine"/portifólio para aqueles que procuram por um emprego na área, de modo a poderem mostrar aos recrutadores os projetos que desenvolvem ou já desenvolveram.

- Git precisa ser instalado na máquina: git-scm.com (no Linux às vezes já vem instalado)

- Git Bash: é um terminal de comando que pode ser instalado durante a instalação do Git. Lembra o Vim. Os comandos para navegar em pastas e tal são iguais aos do Linux. Também tem umas cores para tornar a interface mais amigável e facilitar a leitura/execução dos comandos. Mas é possível também chamar o Git pelo CMD do Windows (acertando as variáveis no PATH). Você também pode clicar com o botão direito na pasta em que está seu código e selecionar para abrir o Git Bash; com isso, ele será aberto já no caminho para esta pasta.

- Git versiona repositórios, ou seja, é necessário criar uma pasta (que será o repositório) para os arquivos que você quer versionar.

- HEAD: é nossa posição atual nos arquivos versionados (é o topo do versionamento), em referência ao último commit feito

- master: geralmente o nome padrão do branch em que estamos trabalhando (no GitHub eles usam o nome "main" - será que é por causa do nome ser "master"...?)

- é possível informar ao Git para não versionar alguns arquivos ou pastas; para isso, crie um arquivo chamado .gitignore (com o ponto no começo, sem extensão) e nele insira o nome dos arquivos e pastas (no caso de pastas, insira a barra / no final do nome da pasta) que não deverão ser versionados (informar o nome de uma pasta faz com que todo conteúdo dentro dela não seja versionado também)

- Repositório remoto: é o nome dado ao repositório que servirá como o "servidor" do projeto que foi versionado. É ele que indicará a versão corrente dos arquivos versionados e cuidará de todo o versionamento. É nele que faremos o push de modificações e também é nele que as pessoas poderão clonar o código para trabalhar localmente. Eu acabo geralmente chamando de "repositório global". Pode ser tanto uma pasta na sua máquina como um repositório online (no GitHub, por exemplo).

- GitHub: estando logado no site, podemos criar um novo repositório e, após criado, o próprio GitHub irá dar os comandos para fazer o push do nosso repositório local para este repositório no GitHub, ou também como criar tudo do zero dentro do próprio site

- SHA1 (Secure Hash Algorithm) - instrutor fala "Xá1": algoritmo de encriptação que gera um conjunto caracteres de 40 dígitos, um identificador único para o arquivo. É o que permite ao git identificar cada mudança nos arquivos versionados (cada mudança gera uma nova chave SHA1). Quando é feita uma alteração no conteúdo do arquivo, mas essa alteração faz com o que o arquivo tenha um conteúdo igual a alguma versão anterior, a chave SHA1 será a mesma, pois o código gerado para o conteúdo daquele arquivo resulta na mesma chave.

- Blob (bolha): objeto no Git. É um arquivo que contém o conteúdo de um arquivo + metadados que o GIT inclui sobre o arquivo. É o blob que irá passar pelo SHA1 para gerar a chave

- Tree: outro objeto no Git. A árvore que armazena um conjunto de blobs + SHA1 de cada blob + nome do arquivo contido em cada blob + outros metadados da árvore. Pode também armazenar outras árvores, de maneira recursiva. Pense como se fosse um explorador de arquivos: as árvores são as pastas e os blobs, os arquivos. A árvore também tem um SHA1 próprio. Qualquer alteração em um arquivo, irá alterar o SHA1 do blob e, consequentemente, irá alterar o SHA1 da árvore.

- Commit: também é um objeto no Git. Aponta para uma árvore, para um parent (o último commit antes dele), para um autor e para uma mensagem. Possui também um timestamp de quando o objeto foi criado. Novamente, o commit também tem um SHA1 próprio.

- Essa estruturação em blobs, trees e commit é uma das formas que o Git garante a segurança do versionamento. Aquela versão é única, ou seja, qualquer alteração em algum conteúdo ou metadado irá gerar um novo SHA1, impossibilitando de que haja uma manipulação maliciosa dos arquivos.

- Ciclo de vida dos arquivos versionados: Untracked - Unmodified - Modified - Staged

----
commit
----
- é a etapa inicial para salvar alterações no repositório remoto. Ao commitar, use a flag -m para escrever uma mensagem descritiva curta do que foi feito na alteração/criação do arquivo (ou arquivos) a ser commitado
- cada commit recebe um HASH code, que serve como identificador único daquele commit
- você pode fazer vários commits para um mesmo arquivo, ou diferentes arquivos, antes de efetuar o push (que é quando efetivamente as modificações são salvas no repositório central.
- você decide quando fazer ou não um commit. Uma convenção, no entanto, é nunca commitar um código que não funciona. Uma recomendação é commitar a cada alteração significativa do seu projeto: nova feature, bug corrigido. Durante o curso, vários commits são feitos para explicar diversos tópicos e conceitos, mas não entender isso como sendo a forma correta de commitar.

----
Branch 
----
- é uma maneira de criar vertentes/ramos de desenvolvimento dentro de um projeto, de modo a não interferir no código compartilhado. Pode ser usado, por exemplo, para criar uma nova feature (sem danificar a branch principal) ou dividir o trabalho de uma equipe.
- https://git-school.github.io/visualizing-git/ é um bom site para visualmente entender branches
- A branch pode voltar à principal por meio do merge.
- merge e rebase podem gerar conflitos quando um mesmo arquivo foi modificado pelas duas branches em que está sendo feito o merge/rebase. Nesse caso, o git irá adicionar linhas nos arquivos que estão gerando conflito, indicando aonde os conflitos acontecem, e você é responsável por resolver esses conflitos (eliminando as linhas que você considera que não são mais necessárias para o atual estado de seu projeto. Resolvido os conflitos, segue o processo de commit dessas mudanças e, aí então o merge/rebase é finalizado (no caso do rebase, foi necessário executar o comando git rebase --continue para encerrar o rebase)

+----------------------------+
   C O M A N D O S   G I T   
+----------------------------+

git init : inicia o versionamento em um diretório (cria um repositório). Necessário navegar até a pasta onde estão os códigos a serem versionados e então executar este comando
-> flag --bare indica que o repositório é "puro", só irá conter arquivos, não serão feitas modificações nele. Pode ser utilizado quando criamos localmente o repositório remoto, que será o repositório acessado por todos para baixar arquivos e subir mudanças.

git config --local user.name "Seu nome aqui"
git config --local user.email "seu@email.aqui"
-> são comandos para informar o nome e e-mail de quem está trabalhando naquele repositório local. É útil quando se trabalha em equipe, assim é possível identificar os autores das mudanças. O comando --local adiciona essas informações ao repositório corrente; caso queira que seja uma informação para todos os seus repositórios locais, use o --global. Essas duas configs são necessárias, caso contrário vai dar problema na hora do commit

git config --list : mostra a lista de configurações 

git config --local --unset <nome_da_configuracao>: apaga da lista de configuração a proprieda informada

git status : dá detalhes sobre os arquivos em seu repositório, por exemplo, se há arquivos que foram criados ou modificados e que ainda não foram commitados ou enviados ao repositório central; em qual branch você está trabalhando.

git add <nome_do_arquivo> : informa ao git que o arquivo deverá ser adicionado ao próximo commit a ser executado. O arquivo vai para "stage" (é o estado em que o arquivo está no aguardo para ser "commitado").
-> caso sejam vários arquivos, pode ser usando o ponto: "git add ." . Mas atenção: nesse caso todos os arquivos que foram modificados no repositório local serão adicionados. Para selecionar os arquivos manualmente, você pode inseri-los separados por espaço: git add <arq_1> <arq_2> <arq_3> ...

git commit -m "<descricao_curta_de_seu_commit>" : commita suas alterações para serem salvas no repositório remoto

git log : histórico de commits feitos, em ordem decrescente de data, trazendo nome e email de quem commitou, o código Hash e a mensagem de cada commit
-> flags (veja mais em https://devhints.io/git-log):
--oneline : histórico resumido; mostra somente parte do hash e mensagem de cada commit
-p : histórico detalhado: mostra também as alterações feitas por cada commit

git remote add <nome_do_repositorio_remoto> <endereco_para_o_repositorio_remoto> : cria uma ligação entre o repositório local e um repositório remoto. O endereço pode ser tanto uma pasta da própria máquina (precisa ser preparada com o git init --bare), quanto uma URL (para um repositório online criado no GitHub, por exemplo). O nome_do_repositorio_remoto é o nome que você dará para esse repositório remoto, e que será necessário na hora do push/pull. A convenção é usar o nome "origin"

git remote -v : lista os repositórios 

git clone <caminho_do_repositorio_remoto> <nome_para_a_pasta_local>: clona um projeto, ou seja, baixa os arquivos de um repositório remoto para a máquina e salva em uma pasta com o nome_para_a_pasta_local. Com o projeto clonado, é possível alterar os arquivos, commitar e enviar para o repositório remoto. Comando deve ser dado na pasta em que você deseja salvar o repositório remoto. O caminho também pode ser a URL de um repositório online.
-> o nome do repositório remoto será "origin" para o projeto clonado, mas pode ser renomeado com git remote rename <nome_atual> <novo_nome>

git push <nome_do_repositorio_remoto> <nome_da_branch> : envia as mudanças commitadas para o repositório remoto.
-> flag -u : memoriza o repositório e branch desse push e deixa você usar o comando git push, sem precisar informar repositório e branch toda vez (não parece ser bem essa a definição, mas não consegui entender). É perigoso, caso você comece a trabalhar com outras branches e se esqueça de alterar na hora de fazer o push, então o recomendado é fazer o push completo, com nome do repositório remoto e nome da branch

git pull <nome_do_repositorio_remoto> <nome_da_branch> : baixa os arquivos do repositório remoto. O que acontece com os arquivos que você alterou e ainda não commitou? Perde os dados? Os arquivos alterados não são baixados?
   Resposta: se os arquivos estiverem alterados no repositório remoto e também foram modificados no repositório local (mas ainda não commmitados), ao fazer o pull o git irá emitir um erro de que o arquivo será sobrescrito pelo merge. A solução que o git informa é commitar o arquivo que está modificado no repositório local ou usar o git stash antes de fazer o pull (ver mais abaixo sobre o git stash).
      Se optar por commitar, ao fazer o git pull o próprio git irá fazer o merge das modificações que estão no repositório remoto e no local.
      Se optar pelo stash, ao fazer o git pull o arquivo será atualizado somente com as modificações do repositório remoto e você fica responsável por trazer as modificações que estão no stash e resolver os conflitos de merge

git branch -M <novo_nome_da_branch> : comando para renomear a branch atual. Esse comando é sugerido quando você cria um repositório novo no GitHub, pois o GitHub trabalha com o nome "main" para a branch principal, sendo que no git o nome padrão da branch principal é "master"

git branch <nome_da_nova_branch> : cria nova branch, porém, NÃO ativa a nova branch como principal; você continuará na branch atual

git checkout <nome_da_branch> : altera a branch que será a ativa (move seu HEAD para esta nova branch), carregando a versão mais atual dos arquivos que estão nessa branch

git checkout -b <nome_da_nova_branch> : cria nova branch E já altera para ser a ativa

git merge <outra_branch> : faz um merge (combinação) da branch atual com o commit mais atual da outra_branch, para que as duas ramificações se unam em uma só. Será aberto um texto no VIM para incluir uma mensagem de commit de merge (se não quiser escrever nada, digite :x e pressione ENTER; caso esteja no modo de INSERT, pressione ESC antes de digitar o :x). No processo de merge, você não tem acesso aos commits anteriores da outra_branch (mas eles ainda estarão no histórico da outra_branch, caso você faça um checkout nela).

git rebase <outra_branch> : traz todos os commits da outra_branch para a branch atual e atualiza as modificações. Os commits da outra_branch serão inseridos na "linha do tempo" dos commits a partir do momento em que houve a criação da outra_branch, e na frente destes seguirão os commits que foram feitos na branch atual. O último commit da branch atual será considerado como o ativo. Não gera um commit de merge.

git checkout <HASH_do_commit>: navega para um commit específico do log. Serão carregados os arquivos desse commit, PORÉM, qualquer alteração feita no código, inclusive commits, NÃO entrarão no histórico. Para que essas alterações entrem no histórico do projeto, você deve criar uma branch (pode usar o git checkout -b <nome_da_nova_branch> após ter navegado para o commit desejado)

((antigo)) git checkout -- <nome_do_arquivo> : funciona como um Ctrl + Z, quando eu quero descartar as alterações feitas em um arquivo que está com o status "modified"; irá restaurar o arquivo corrente do meu repositório local. Atenção: você perde suas modificações ainda não commitadas no arquivo ou ainda não adicionadas ao stage. Atenção 2: se você já tiver adicionado o arquivo ao stage (por meio do git add <nome_do_arquivo>), esse comando de checkout não irá funcionar; primeiro você precisará fazer o git reset (ver comando mais abaixo)
   esse é o comando antigo. O novo é git restore <file>

((antigo)) git reset HEAD <nome_do_arquivo> : serve para remover um arquivo que foi adicionado para ser commitado (ou seja, desfaz a ação do git add <nome_do_arquivo>); seu versionador voltará a olhar para o HEAD como sendo o estado atual; o arquivo voltará a aparecer como modified ao dar um git status
   esse é o comando antigo; o novo é git restore --staged <file>

git revert <HASH_do_commit>: desfaz o commit cujo hash você informou no comando. Irá desfazer esse commit e gerar um novo commit para informar essa alteração. Seu código voltará a ser aquele do último commit antes do que sofreu o revert (você perde as alterações do commit que sofreu o revert)
-> não precisa passar o código hash completo. Pode passar somente os 7 caracteres iniciais

git stash: salva os arquivos em um local temporário, por exemplo, para alterações que eu ainda não terminei mas que não vou commitar por enquanto. Desse modo, essas alterações não são perdidas. Atenção: ao fazer isso, seu código será revertido para o do último commit.

git stash list: lista todas as modificações que foram salvas no stash (caso você tenha usado o comando git stash mais de uma vez)

git stash apply <numero_da_lista>: traz de volta as modificações que foram salvas e faz um merge com as outras alterações que foram feitas desde então. O numero_da_lista é o numero que vem entre chaves na lista do git stash list e que você quer recuperar (stash@{0}:).

git stash drop <numero_da_lista>: remove o que foi salvo na stash

git stash pop: traz as modificações do último git stash feito e remove ele da lista do stash (é uma combinação de git stash apply 0 e git stash drop); é como um pop de pilha

git diff: mostra as diferenças no código atual e o código do último commit, caso você tenha modificações no arquivo. E se for mais de um arquivo? -> Ele vai mostrar as diferenças arquivo por arquivo; a linha de comando dá indicações de quando um arquivo termina e um novo será mostrado.

git diff <hash_commmit_X>..<hash_commmit_Y>: mostra as diferenças desde o hash_commmit_X até o hash_commmit_Y
-> o mesmo pode ser aplicado para branches (informação dada no resumo da aula, mas não mostrada durante a aula)

git tag -a <nome_da_tag>: cria uma tag, que seria como uma "versão" do projeto, um release do projeto. Não será mais modificado a partir daquele ponto. Novas modificações irão para a próxima tag (próxima release). Pense como se você estivesse entregando a versão 1.0 do seu projeto, por exemplo (git tag -a v1.0) criação de uma release do código. 
-> flag opcional -m "<mensagem>": adiciona uma mensagem
-> antes o GitHub já adicionava a tag como release automaticamente, mas agora cabe ao próprio desenvolvedor navegar até a tag e gerar uma release

git tag: mostra todas as tags criadas

git push <nome_do_repositorio_remoto> <nome_da_tag>: comando necessário para enviar a tag para o repositório remoto

====
Curso de
Git e GitHub: estratégias de ramificação, Conflitos e Pull Requests
Instrutor: Vinicius Dias
-----------

Issues no GitHub
É uma seção presente nos repositórios do GitHub, em que as pessoas podem enviar um texto à equipe do repositório, reportando algum problema que encontraram no código/projeto; ela também pode ser utilizada para tirar dúvidas, entrar em contato com os desenvolvedores. É possível utilizá-la para o controle de melhorias/erros apontados pelos usuários, podendo fazer buscas com filtros e categorizar as issues com tags.

Pull Requests e Fork
Fork é uma funcionalidade do GitHub, que permite que você copie para seu repositório remoto uma cópia de um projeto de outro usuário do GitHub. Toda a estrutura e arquivos do projeto serão copiados para seu repositório.
   Você poderá fazer modificações no projeto, inserir novos arquivos, novas branches, commmits, etc. Essas modificações ficarão somente em SEU projeto, NÃO serão enviadas para o projeto original do qual o fork foi feito.
   Atualizações no projeto original NÃO serão pegas pelo git pull. Caso queira atualizar o seu repositório com as atualizações do original, é necessário criar um remote para o repositório original, baixar as atualizações com o comando git fetch e depois fazer um merge ou rebase da branch principal desse remote com sua branch
      Diferença para o git clone: o clone faz o download do repositório para a sua máquina, mas a referência (o remote) continua sendo o repositório original. 

Caso deseje enviar as modificações feitas ao projeto original para o qual você fez o fork, é possível utilizando a funcionalidade de Pull Request (PR) do GitHub
   É possível enviar um título e um texto com as modificações feitas. O GitHub irá mostrar o diff dos arquivos modificados e também já avisa se consegue fazer o merge automático.
   O responsável pelo repositório original poderá analisar os PR e decidir se irá fazer ou não o merge da solicitação. Tudo isso é feito dentro do GitHub.

União de commits
É possível juntar commits utilizando o git rebase. Isso só funciona com commits que ainda não foram enviados ao repositório remoto via git push. Se você tentar fazer após o push, irá funcionar, mas quando você fizer o push dessa união, o git irá reportar erro de que seu repositório local está atrasado com relação ao remoto e irá sugerir um merge (ou seja, não adiantará de nada) 
   git rebase -i HEAD~3
      -i de interativo
      HEAD~3 informa para selecionar os 3 últimos commits a partir do HEAD

   git rebase -i <HASH_do_commit>
      irá selecionar todos os commits posteriores a <HASH_do_commit> (ele não estará incluso)

   Irá abrir o editor de texto com a lista dos commits, para você analisar e marcar como eles ficarão. Digitar pick (ou p) mantém o commit; digitar squash (ou s) é o que une o commit ao anterior na lista; há outras opções que o editor fornece.

   Será gerado um novo commit para informar da ação que foi feita. É possível editar a mensagem utilizando o texto dos outros commits relacionados.

Cherry-pick
É o nome que se dá à ação de selecionar um commit específico e trazer para o HEAD da branch atual. Imagine, por exemplo, que há uma branch em que uma nova funcionalidade está sendo desenvolvida, mas ainda não está pronta. No entanto, uma modificação feita nessa branch está sendo necessária na branch principal (correção de um bug, por exemplo). É possível, neste caso, usar o cherry-pick para trazer para a branch principal o commit que possui essa modificação. Será feito um merge (ou deverão ser resolvidos os conflitos) e um novo commit será gerado.
Quando a nova funcionalidade na outra branch estiver finalizada e for feito o git rebase, não irá haver conflito com o commit que foi trazido pelo cherry-pick - o Git irá entender e organizar o histórico da maneira correta.
   git cherry-pick <HASH_do_commit>

Bisect
É uma maneira de navegar pelos commits e ver o que foi alterado, em busca, por exemplo, do momento em que alguma alteração indesejada foi feita ou um bug foi introduzido.
Necessário indicar o commit onde algo indesejado aconteceu (bad) e o commit em que possivelmente estava tudo ok (good). O git irá percorrer os commits intermediários, possibilitando olhar as alterações que foram feitas e indicar ao git se o commit é good ou bad. Por meio da navegação, é possível ver o HASH do commit em que estava tudo OK e reverter o código a esse commit ou verificar as alterações indesejadas e removê-las do código atual.
É uma alternativa mais interativa para não precisar ficar fazendo manualmente git checkout ou diff

Blame
Apesar do nome (culpar), o comando informa o último usuário que alterou cada linha do código. Informa também o hash do commit e data da modificação.
   git blame <nome_do_arquivo>
Acredito que o VS Code tem uma extensão que faz a mesma coisa.

Convenções sobre master e branch (mais para o caso de estar trabalhando em uma empresa)
Não desenvolver na master. Deixar nela o código que está pronto para ir em produção. 
Criar branches para desenvolver seu código. Depois de finalizado e validado, aí sim fazer o merge/rebase com a master para que vá para produção.
   Sugestão: criar uma branch de development e, dentro dela, criar branches para cada feature nova. À medida que essas features vão sendo finalizadas e validadas, faz o merge para a branch de development. Ao finalizar todas as features especificadas e tendo feita todas as validações, cria-se uma nova branch de release e faz o merge com a branch de development. Nesta branch de release é possível fazer novos testes e correções e, estando tudo validado, aí então faz-se o checkout para a main e merge com a release (possivelmente também gerando uma tag de nova release).
   Bugs que precisam ser corrigidos com urgência poderiam ficar dentro de uma branch de hotfix. Após corrigidos, é feito o merge com a master e também com development, para manter ambos atualizados com a correção do bug.
   Essa estratégia de organização é chamado de Git Flow
   Link de exemplo com uma imagem: https://cdn-images-1.medium.com/max/1200/1*8-zDz1s5Atux_yNW_mXmfg@2x.png

Hooks
Ações a serem executadas quando certos eventos do git acontece. Por exemplo: executar um script de testes no código antes de todo commit (pre-commit); executar um script de deploy após um push (post-receive).
Scripts de exemplo para alguns eventos se encontram na pasta hook, dentro da pasta .git, e o final do nome de cada arquivo é .sample. Você pode criar um arquivo dentro dessa pasta com o mesmo nome menos o sample para executar o hook.
Lista de hooks e mais infos: https://githooks.com
O GitHub possui algo parecido, chamado GitHub Actions.

Sugestões de softwares com GUI para facilitar a visualização/utilização do Git
Git Cola, GitHub Desktop, GitKraken (este último tem até a implementação da estratégia do Git Flow)
O próprio VS Code possui algumas funcionalidades para versionar com o git e linkar com o GitHub